Exploit Mitigation Techniques on GCC
------------------------------------

1) ASLR & PIE
-------------

############### test1.c ########################
#include <stdlib.h>
#include <stdio.h>

void* getAddr () {
 return __builtin_return_address(0)-0x5;
};

int main(int argc, char** argv){
 printf("Code located at: %p\n",getAddr());
 return 0;
}
#################################################
-Now test PIE in gcc, by disabling it.
check
-----
vinod@vinod-ThinkPad-L440:~/Project$ cat /proc/sys/kernel/randomize_va_space
2
vinod@vinod-ThinkPad-L440:~/Project$ gcc -no-pie test1.c -o test1
vinod@vinod-ThinkPad-L440:~/Project$ ./test1
Code located at: 0x400509
vinod@vinod-ThinkPad-L440:~/Project$ ./test1
Code located at: 0x400509
 
-Now test PIE in gcc, by enabling it. The address are different.
1)
vinod@vinod-ThinkPad-L440:~/Project$ cat /proc/sys/kernel/randomize_va_space
2
vinod@vinod-ThinkPad-L440:~/Project$ gcc -fPIE -pie test1.c -o test1
vinod@vinod-ThinkPad-L440:~/Project$ ./test1
Code located at: 0x56278bf3b66c
vinod@vinod-ThinkPad-L440:~/Project$ ./test1
Code located at: 0x56400873166c

------------------------------------------

Disabling ASLR
--------------
sudo gedit /proc/sys/kernel/randomize_va_space to zero.

555555554000-55555555c000 r-xp 00000000 08:05 2883609                    /bin/cat
55555575b000-55555575c000 r--p 00007000 08:05 2883609                    /bin/cat
55555575c000-55555575d000 rw-p 00008000 08:05 2883609                    /bin/cat
55555575d000-55555577e000 rw-p 00000000 00:00 0                          [heap]
7ffff7015000-7ffff79e4000 r--p 00000000 08:05 2497221                    /usr/lib/locale/locale-archive
7ffff79e4000-7ffff7bcb000 r-xp 00000000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7bcb000-7ffff7dcb000 ---p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dcb000-7ffff7dcf000 r--p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dcf000-7ffff7dd1000 rw-p 001eb000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dd1000-7ffff7dd5000 rw-p 00000000 00:00 0 
7ffff7dd5000-7ffff7dfc000 r-xp 00000000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7fba000-7ffff7fde000 rw-p 00000000 00:00 0 
7ffff7ff8000-7ffff7ffb000 r--p 00000000 00:00 0                          [vvar]
7ffff7ffb000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00027000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7ffd000-7ffff7ffe000 rw-p 00028000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ cat /proc/self/maps
555555554000-55555555c000 r-xp 00000000 08:05 2883609                    /bin/cat
55555575b000-55555575c000 r--p 00007000 08:05 2883609                    /bin/cat
55555575c000-55555575d000 rw-p 00008000 08:05 2883609                    /bin/cat
55555575d000-55555577e000 rw-p 00000000 00:00 0                          [heap]
7ffff7015000-7ffff79e4000 r--p 00000000 08:05 2497221                    /usr/lib/locale/locale-archive
7ffff79e4000-7ffff7bcb000 r-xp 00000000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7bcb000-7ffff7dcb000 ---p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dcb000-7ffff7dcf000 r--p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dcf000-7ffff7dd1000 rw-p 001eb000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dd1000-7ffff7dd5000 rw-p 00000000 00:00 0 
7ffff7dd5000-7ffff7dfc000 r-xp 00000000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7fba000-7ffff7fde000 rw-p 00000000 00:00 0 
7ffff7ff8000-7ffff7ffb000 r--p 00000000 00:00 0                          [vvar]
7ffff7ffb000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00027000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7ffd000-7ffff7ffe000 rw-p 00028000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]


Check there is no randomization in memory allocations.

2)Enabling ASLR
sudo gedit /proc/sys/kernel/randomize_va_space to two.

vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ cat /proc/self/maps
564c7878d000-564c78795000 r-xp 00000000 08:05 2883609                    /bin/cat
564c78994000-564c78995000 r--p 00007000 08:05 2883609                    /bin/cat
564c78995000-564c78996000 rw-p 00008000 08:05 2883609                    /bin/cat
564c799dd000-564c799fe000 rw-p 00000000 00:00 0                          [heap]
7ff4773a3000-7ff477d72000 r--p 00000000 08:05 2497221                    /usr/lib/locale/locale-archive
7ff477d72000-7ff477f59000 r-xp 00000000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ff477f59000-7ff478159000 ---p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ff478159000-7ff47815d000 r--p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ff47815d000-7ff47815f000 rw-p 001eb000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7ff47815f000-7ff478163000 rw-p 00000000 00:00 0 
7ff478163000-7ff47818a000 r-xp 00000000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ff47834c000-7ff478370000 rw-p 00000000 00:00 0 
7ff47838a000-7ff47838b000 r--p 00027000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ff47838b000-7ff47838c000 rw-p 00028000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7ff47838c000-7ff47838d000 rw-p 00000000 00:00 0 
7ffd6739f000-7ffd673c0000 rw-p 00000000 00:00 0                          [stack]
7ffd673e3000-7ffd673e6000 r--p 00000000 00:00 0                          [vvar]
7ffd673e6000-7ffd673e7000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ cat /proc/self/maps
55eb4d6fc000-55eb4d704000 r-xp 00000000 08:05 2883609                    /bin/cat
55eb4d903000-55eb4d904000 r--p 00007000 08:05 2883609                    /bin/cat
55eb4d904000-55eb4d905000 rw-p 00008000 08:05 2883609                    /bin/cat
55eb4f784000-55eb4f7a5000 rw-p 00000000 00:00 0                          [heap]
7f6d8cf0e000-7f6d8d8dd000 r--p 00000000 08:05 2497221                    /usr/lib/locale/locale-archive
7f6d8d8dd000-7f6d8dac4000 r-xp 00000000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7f6d8dac4000-7f6d8dcc4000 ---p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7f6d8dcc4000-7f6d8dcc8000 r--p 001e7000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7f6d8dcc8000-7f6d8dcca000 rw-p 001eb000 08:05 267046                     /lib/x86_64-linux-gnu/libc-2.27.so
7f6d8dcca000-7f6d8dcce000 rw-p 00000000 00:00 0 
7f6d8dcce000-7f6d8dcf5000 r-xp 00000000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7f6d8deb7000-7f6d8dedb000 rw-p 00000000 00:00 0 
7f6d8def5000-7f6d8def6000 r--p 00027000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7f6d8def6000-7f6d8def7000 rw-p 00028000 08:05 267018                     /lib/x86_64-linux-gnu/ld-2.27.so
7f6d8def7000-7f6d8def8000 rw-p 00000000 00:00 0 
7ffe966a4000-7ffe966c5000 rw-p 00000000 00:00 0                          [stack]
7ffe967e3000-7ffe967e6000 r--p 00000000 00:00 0                          [vvar]
7ffe967e6000-7ffe967e7000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]

There is a randomization of memory allocations in ASLR is enabled.


***********************************************************************************************************************************************
***********************************************************************************************************************************************

Non-Executable Bit (NX)
-----------------------
1)
By default (or gcc -z noexecstack -o test test.c ) the gcc enables request the linker to mark program stack segmet as non-executable.
See the below readelf, the GNU_STACK has RW permissions.

vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ gcc test.c -o test 2>/dev/null
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ cat /dev/null
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ readelf -l test

Elf file type is DYN (Shared object file)
Entry point 0x5f0
There are 9 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x00000000000001f8 0x00000000000001f8  R      0x8
  INTERP         0x0000000000000238 0x0000000000000238 0x0000000000000238
                 0x000000000000001c 0x000000000000001c  R      0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x00000000000009d0 0x00000000000009d0  R E    0x200000
  LOAD           0x0000000000000da8 0x0000000000200da8 0x0000000000200da8
                 0x0000000000000268 0x0000000000000270  RW     0x200000
  DYNAMIC        0x0000000000000db8 0x0000000000200db8 0x0000000000200db8
                 0x00000000000001f0 0x00000000000001f0  RW     0x8
  NOTE           0x0000000000000254 0x0000000000000254 0x0000000000000254
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_EH_FRAME   0x0000000000000860 0x0000000000000860 0x0000000000000860
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000	(<----------HERE)
                 0x0000000000000000 0x0000000000000000  RW     0x10		(<----------HERE)
  GNU_RELRO      0x0000000000000da8 0x0000000000200da8 0x0000000000200da8
                 0x0000000000000258 0x0000000000000258  R      0x1

--------------------------------------------------------------------------
2)

By diasbling NX gcc enables request the linker to mark program stack as executable.
See the below readelf, the GNU_STACK has RWE permissions.

vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ gcc -z execstack -o test test.c 2>/dev/null 
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ readelf -l test

Elf file type is DYN (Shared object file)
Entry point 0x5f0
There are 9 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x00000000000001f8 0x00000000000001f8  R      0x8
  INTERP         0x0000000000000238 0x0000000000000238 0x0000000000000238
                 0x000000000000001c 0x000000000000001c  R      0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x00000000000009d0 0x00000000000009d0  R E    0x200000
  LOAD           0x0000000000000da8 0x0000000000200da8 0x0000000000200da8
                 0x0000000000000268 0x0000000000000270  RW     0x200000
  DYNAMIC        0x0000000000000db8 0x0000000000200db8 0x0000000000200db8
                 0x00000000000001f0 0x00000000000001f0  RW     0x8
  NOTE           0x0000000000000254 0x0000000000000254 0x0000000000000254
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_EH_FRAME   0x0000000000000860 0x0000000000000860 0x0000000000000860
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000	(<----------HERE)
                 0x0000000000000000 0x0000000000000000  RWE    0x10		(<----------HERE)
  GNU_RELRO      0x0000000000000da8 0x0000000000200da8 0x0000000000200da8
                 0x0000000000000258 0x0000000000000258  R      0x1

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame 
   03     .init_array .fini_array .dynamic .got .data .bss 
   04     .dynamic 
   05     .note.ABI-tag .note.gnu.build-id 
   06     .eh_frame_hdr 
   07     
   08     .init_array .fini_array .dynamic .got 
***********************************************************************************************************************************************
***********************************************************************************************************************************************

Stack Canaries / Stack-Smashing Protection (SSP)
------------------------------------------------

1)
By default(or gcc -fstack-protector-all -o test test.c), the saved canary value is checked before a program returns control to its parent.

Check below readelf, the gcc automatically checks the stack canary value by calling the __stack_chk_fail function.

vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ gcc test.c -o test 2>>/dev/null
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ readelf -r test

Relocation section '.rela.dyn' at offset 0x478 contains 8 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200da8  000000000008 R_X86_64_RELATIVE                    6f0
000000200db0  000000000008 R_X86_64_RELATIVE                    6b0
000000201008  000000000008 R_X86_64_RELATIVE                    201008
000000200fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0
000000200fe0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0
000000200fe8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0
000000200ff0  000700000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0
000000200ff8  000800000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0

Relocation section '.rela.plt' at offset 0x538 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200fc0  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __stack_chk_fail@GLIBC_2.4 + 0		(<--------HERE)
000000200fc8  000300000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0
000000200fd0  000600000007 R_X86_64_JUMP_SLO 0000000000000000 gets@GLIBC_2.2.5 + 0

----------------------------------------------------------------------------------

2)
If disabling the stack canaries check in gcc by using -fno-stack-protector then the __stack_chk_fail function will not call. Check below example.



vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ gcc -fno-stack-protector test.c -o test 2>>/dev/null
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ readelf -r test

Relocation section '.rela.dyn' at offset 0x438 contains 8 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200db0  000000000008 R_X86_64_RELATIVE                    680
000000200db8  000000000008 R_X86_64_RELATIVE                    640
000000201008  000000000008 R_X86_64_RELATIVE                    201008
000000200fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0
000000200fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0
000000200fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0
000000200ff0  000600000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0
000000200ff8  000700000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0

Relocation section '.rela.plt' at offset 0x4f8 contains 2 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200fc8  000200000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0
000000200fd0  000500000007 R_X86_64_JUMP_SLO 0000000000000000 gets@GLIBC_2.2.5 + 0

***********************************************************************************************************************************************
***********************************************************************************************************************************************

FORTIFY_SOURCE
--------------

1)
By default the gcc could not requested to replace any vulnerable function calls in the program source with their equivalent safer counterparts.
Below example shows that printf and gets are not calling the safer equivalent funtions.

vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ gcc test.c -o test 2>>/dev/null
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ readelf -r test

Relocation section '.rela.dyn' at offset 0x478 contains 8 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200da8  000000000008 R_X86_64_RELATIVE                    6f0
000000200db0  000000000008 R_X86_64_RELATIVE                    6b0
000000201008  000000000008 R_X86_64_RELATIVE                    201008
000000200fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0
000000200fe0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0
000000200fe8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0
000000200ff0  000700000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0
000000200ff8  000800000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0

Relocation section '.rela.plt' at offset 0x538 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200fc0  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __stack_chk_fail@GLIBC_2.4 + 0		
000000200fc8  000300000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0			(<--------HERE)
000000200fd0  000600000007 R_X86_64_JUMP_SLO 0000000000000000 gets@GLIBC_2.2.5 + 0			(<--------HERE)

2)
By enabling the fortify in gcc by -D_FORIFY_SOURCE option, the gcc requested to replace any vulnerable function calls in the program source with their equivalent safer counterparts.
Below example shows that printf and gets are calling the safer equivalent funtions.

vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ gcc -O1 -D_FORIFY_SOURCE=2 test.c -o test 2>>/dev/null
vinod@vinod-ThinkPad-L440:~/Dropbox/Masters/Vinod/Masters/Sem 1st/I521 Malware Threat Defence/Project$ readelf -r test

Relocation section '.rela.dyn' at offset 0x498 contains 8 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200da8  000000000008 R_X86_64_RELATIVE                    710
000000200db0  000000000008 R_X86_64_RELATIVE                    6d0
000000201008  000000000008 R_X86_64_RELATIVE                    201008
000000200fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0
000000200fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0
000000200fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0
000000200ff0  000700000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0
000000200ff8  000800000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0

Relocation section '.rela.plt' at offset 0x558 contains 3 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000200fc0  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __stack_chk_fail@GLIBC_2.4 + 0
000000200fc8  000500000007 R_X86_64_JUMP_SLO 0000000000000000 gets@GLIBC_2.2.5 + 0			(....Ask to bro, why gets_chk not called here)
000000200fd0  000600000007 R_X86_64_JUMP_SLO 0000000000000000 __printf_chk@GLIBC_2.3.4 + 0		(<--------HERE)


***********************************************************************************************************************************************
***********************************************************************************************************************************************
RELRO
-----
Making the Program Linkable Table to read only.

By default.
The gcc compiler is enabled the Readonly for the Program Linkable table(GNU_RELRO)

vinod@vinod-ThinkPad-L440:~/Project$ gcc test.c -o test

readelf -l --wide test

Elf file type is DYN (Shared object file)
Entry point 0x660
There are 9 program headers, starting at offset 64

Program Headers:
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x0001f8 0x0001f8 R   0x8
  INTERP         0x000238 0x0000000000000238 0x0000000000000238 0x00001c 0x00001c R   0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x000a50 0x000a50 R E 0x200000
  LOAD           0x000da0 0x0000000000200da0 0x0000000000200da0 0x000275 0x000278 RW  0x200000
  DYNAMIC        0x000db0 0x0000000000200db0 0x0000000000200db0 0x0001f0 0x0001f0 RW  0x8
  NOTE           0x000254 0x0000000000000254 0x0000000000000254 0x000044 0x000044 R   0x4
  GNU_EH_FRAME   0x0008e4 0x00000000000008e4 0x00000000000008e4 0x000044 0x000044 R   0x4
  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10
  GNU_RELRO      0x000da0 0x0000000000200da0 0x0000000000200da0 0x000260 0x000260 R   0x1    (<-------HERE)

***
Check it out after enabling the relro by using below command

vinod@vinod-ThinkPad-L440:~/Project$ gcc -Wl,-z,relro,-z,now test.c -o test 2>/dev/null
vinod@vinod-ThinkPad-L440:~/Project$ readelf -l --wide test

Elf file type is DYN (Shared object file)
Entry point 0x660
There are 9 program headers, starting at offset 64

Program Headers:
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x0001f8 0x0001f8 R   0x8
  INTERP         0x000238 0x0000000000000238 0x0000000000000238 0x00001c 0x00001c R   0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x000a50 0x000a50 R E 0x200000
  LOAD           0x000da0 0x0000000000200da0 0x0000000000200da0 0x000275 0x000278 RW  0x200000
  DYNAMIC        0x000db0 0x0000000000200db0 0x0000000000200db0 0x0001f0 0x0001f0 RW  0x8
  NOTE           0x000254 0x0000000000000254 0x0000000000000254 0x000044 0x000044 R   0x4
  GNU_EH_FRAME   0x0008e4 0x00000000000008e4 0x00000000000008e4 0x000044 0x000044 R   0x4
  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10
  GNU_RELRO      0x000da0 0x0000000000200da0 0x0000000000200da0 0x000260 0x000260 R   0x1	(<-------HERE)

Check the above both GNU_RELRO have same read only permissions.

----------------------------------------------------------------------------------------------------------------

2) Disabling RELRO

Check it below example, there is no GNU_RELRO segment, because the dynamic symbol resolutions carried out after the program executions starts.

vinod@vinod-ThinkPad-L440:~/Project$ gcc -Wl,-z,norelro test.c -o test 2>/dev/null
vinod@vinod-ThinkPad-L440:~/Project$ readelf -l --wide test

Elf file type is DYN (Shared object file)
Entry point 0x620
There are 8 program headers, starting at offset 64

Program Headers:
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x0001c0 0x0001c0 R   0x8
  INTERP         0x000200 0x0000000000000200 0x0000000000000200 0x00001c 0x00001c R   0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x000a10 0x000a10 R E 0x200000
  LOAD           0x000a10 0x0000000000200a10 0x0000000000200a10 0x000275 0x000278 RW  0x200000
  DYNAMIC        0x000a20 0x0000000000200a20 0x0000000000200a20 0x0001f0 0x0001f0 RW  0x8
  NOTE           0x00021c 0x000000000000021c 0x000000000000021c 0x000044 0x000044 R   0x4
  GNU_EH_FRAME   0x0008a4 0x00000000000008a4 0x00000000000008a4 0x000044 0x000044 R   0x4
  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10       (<------there is no relro segment)

***********************************************************************************************************************************************
***********************************************************************************************************************************************



